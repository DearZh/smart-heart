[
  {
    "id": 32541768,
    "matchcontent": "Java高级REST客户端目前支持更常用的API，但仍有很多需要添加的API_任何缺失的API都可以通过使用JSON请求和响应体的低级Java REST客户端来实现。",
    "title": "ES集群，进行大量删除操作时候，bulk队列溢出",
    "content": "我在5.6版本上试了一下，的确如你所说，index/delete走的是bulk thread pool，看来是踩到坑了。 \n 拔了一下代码，delete操作是由TransportDeleteAction这个类来完成的，其实例化的过程中，指定的thread_pool的确是ThreadPool.Names.INDEX。 所以我也比较疑惑，为什么实际上用的是bulk thread pool。 多亏一个同事帮忙看了一下，才恍然大悟，这个类继承自TransportSingleItemBulkWriteAction类",
    "createTime": "2019-05-21 14:21:32",
    "model": "ok",
    "status": 1,
    "clickseq": 0
  },
  {
    "id": 32548769,
    "matchcontent": "springboot使用rest-high-level-client集成elasticsearch响应体的低级Java REST客户端来实现。",
    "title": "springboot使用rest-high-level-client集成elasticsearch",
    "content": "我使用的是Elasticsearch7.2.0，由于官网上推荐使用elasticsearch-rest-high-level-client端集成在springboot所以尝试爬坑，然后再次启动，Elasticsearch正常运行，但是发现spring的rest服务运行不正常，配置的Filter没有正常运行，且不报错。网上找了很久也没有找到有类似错误的问题，后来反复查看官网，他说elasticsearch-rest-high-level-client是基于elasticsearch-rest-client的，我就猜这个基于会不会是依赖的意思呢？index/delete走的是bulk thread pool，看来是踩到坑了。 \n 拔了一下代码，delete操作是由TransportDeleteAction这个类来完成的，其实例化的过程中，指定的thread_pool的确是ThreadPool.Names.INDEX。 所以我也比较疑惑，为什么实际上用的是bulk thread pool。 多亏一个同事帮忙看了一下，才恍然大悟，这个类继承自TransportSingleItemBulkWriteAction类",
    "createTime": "2020-05-29 18:25:32",
    "model": "ok",
    "status": 1,
    "clickseq": 0
  },
  {
    "id": 32548179,
    "matchcontent": "springboot集成elk，它可以从许多来源接收日志，这些来源包括 syslog",
    "title": "springboot集成elk 一： springboot + Elasticsearch",
    "content": "它可以从许多来源接收日志，这些来源包括 syslog、消息传递（例如 RabbitMQ）和JMX，它能够以多种方式输出数据，包括电子邮件、websockets和Elasticsearch。指标中的日志数据。它利用Elasticsearch的REST接口来检索数据，不仅允许用户创建他们自己的数据的定制仪表板视图，还允许他们以特殊的方式查询和过滤数据可以修改集群或节点名称。在启动 Elasticsearch 时从命令行完成",
    "createTime": "2019-10-09 13:42:02",
    "model": "ok",
    "status": 1,
    "clickseq": 0
  }

]